// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Tamir Duberstein (tamird@gmail.com)

syntax = "proto2";
package cockroach.structured;
option go_package = "structured";

import "gogoproto/gogo.proto";
import "cockroach/structured/privilege.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message ColumnType {
  // These mirror the types supported by the sql/parser. See
  // sql/parser/types.go.
  enum Kind {
    BIT = 0;        // BIT(width)
    BOOL = 1;
    INT = 2;        // INT(width)
    FLOAT = 3;      // FLOAT(precision)
    DECIMAL = 4;    // DECIMAL(precision, width /* scale */)
    DATE = 5;
    TIME = 6;
    TIMESTAMP = 7;
    CHAR = 8;       // CHAR(width)
    TEXT = 9;
    BLOB = 10;
  }

  optional Kind kind = 1 [(gogoproto.nullable) = false];
  // BIT, INT, FLOAT, DECIMAL, CHAR and BINARY
  optional int32 width = 2 [(gogoproto.nullable) = false];
  // FLOAT and DECIMAL.
  optional int32 precision = 3 [(gogoproto.nullable) = false];
}

message ColumnDescriptor {
  optional string name = 1 [(gogoproto.nullable) = false];
  optional uint32 id = 2 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "ID", (gogoproto.casttype) = "ColumnID"];
  optional ColumnType type = 3 [(gogoproto.nullable) = false];
  optional bool nullable = 4 [(gogoproto.nullable) = false];
}

message IndexDescriptor {
  optional string name = 1 [(gogoproto.nullable) = false];
  optional uint32 id = 2 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "ID", (gogoproto.casttype) = "IndexID"];
  optional bool unique = 3 [(gogoproto.nullable) = false];
  // An ordered list of column names of which the index is comprised. This list
  // parallels the column_ids list. If duplicating the storage of the column
  // names here proves to be prohibitive, we could clear this field before
  // saving and reconstruct it after loading.
  repeated string column_names = 4;
  // An ordered list of column ids of which the index is comprised. This list
  // parallels the column_names list.
  repeated uint32 column_ids = 5 [(gogoproto.customname) = "ColumnIDs",
      (gogoproto.casttype) = "ColumnID"];
}

// A TableDescriptor represents a table and is stored in a structured metadata
// key. The TableDescriptor has a globally-unique ID, while its member
// {Column,Index}Descriptors have locally-unique IDs.
message TableDescriptor {
  optional string name = 1 [(gogoproto.nullable) = false];
  // The alias for the table. This is only used during query
  // processing and not stored persistently.
  optional string alias = 2 [(gogoproto.nullable) = false];
  optional uint32 id = 3 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
  repeated ColumnDescriptor columns = 4 [(gogoproto.nullable) = false];
  // next_column_id is used to ensure that deleted column ids are not reused.
  optional uint32 next_column_id = 5 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextColumnID", (gogoproto.casttype) = "ColumnID"];
  optional IndexDescriptor primary_index = 6 [(gogoproto.nullable) = false];
  // indexes are all the secondary indexes.
  repeated IndexDescriptor indexes = 7 [(gogoproto.nullable) = false];
  // next_index_id is used to ensure that deleted index ids are not reused.
  optional uint32 next_index_id = 8 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextIndexID", (gogoproto.casttype) = "IndexID"];
  optional PrivilegeDescriptor privileges = 9;
}

// DatabaseDescriptor represents a namespace (aka database) and is stored
// in a structured metadata key. The DatabaseDescriptor has a globally-unique
// ID shared with the TableDescriptor ID.
// Permissions are applied to all tables in the namespace.
message DatabaseDescriptor {
  optional string name = 1 [(gogoproto.nullable) = false];
  optional uint32 id = 2 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
  optional PrivilegeDescriptor privileges = 3;
}
